[{"filePath":"/home/mert/Desktop/Devops-pipeline-project/cypress.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/cypress/e2e/addItem.cy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/cypress/e2e/addMultipleItems.cy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/cypress/e2e/deleteItem.cy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/cypress/e2e/markItem.cy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/cypress/e2e/removeMarkItem.cy.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/cypress/support/commands.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/cypress/support/e2e.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/src/App.spec.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'vi' is defined but never used.","line":3,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"vi"},"fix":{"range":[103,107],"text":""},"desc":"Remove unused variable 'vi'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'flushPromises' is defined but never used.","line":3,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":61,"suggestions":[{"messageId":"removeVar","data":{"varName":"flushPromises"},"fix":{"range":[107,122],"text":""},"desc":"Remove unused variable 'flushPromises'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// tests/todo.spec.js\nimport { mount } from '@vue/test-utils'\nimport { describe, it, expect, beforeEach, vi, flushPromises } from 'vitest'\nimport App from '@/App.vue'\n\ndescribe('To Do List', () => {\n  let wrapper\n\n  beforeEach(() => {\n    wrapper = mount(App)\n  })\n\n  it('should add a new task to the list', async () => {\n    await wrapper.find('input').setValue('buy some milk')\n    await wrapper.find('button').trigger('click')\n    await wrapper.vm.$nextTick()\n    expect(wrapper.find('li').text()).toContain('buy some milk')\n  })\n\n  it('should insert a new task below the existing one', async () => {\n    await wrapper.find('input').setValue('buy some milk')\n    await wrapper.find('button').trigger('click')\n    await wrapper.find('input').setValue('enjoy the assignment')\n    await wrapper.find('button').trigger('click')\n    await wrapper.vm.$nextTick()\n    const todoItems = wrapper.findAll('li')\n    expect(todoItems.at(0).text()).toContain('enjoy the assignment')\n    expect(todoItems.at(1).text()).toContain('buy some milk')\n  })\n\n  it('should mark a task as completed', async () => {\n    await wrapper.find('input').setValue('buy some milk')\n    await wrapper.find('button').trigger('click')\n    await wrapper.vm.$nextTick()\n    await wrapper.find('span').trigger('click')\n    await wrapper.vm.$nextTick()\n    expect(wrapper.find('span').classes()).toContain('completed')\n  })\n\n  it('should clear the mark of a completed task', async () => {\n    await wrapper.find('input').setValue('buy some milk')\n    await wrapper.find('button').trigger('click')\n    await wrapper.vm.$nextTick()\n    await wrapper.find('span').trigger('click')\n    await wrapper.vm.$nextTick()\n    await wrapper.find('span').trigger('click')\n    await wrapper.vm.$nextTick()\n    expect(wrapper.find('span').classes()).not.toContain('completed')\n  })\n\n  it('should delete a task from the list', async () => {\n    await wrapper.find('input').setValue('rest for a while')\n    await wrapper.find('button').trigger('click')\n    await wrapper.vm.$nextTick()\n    await wrapper.find('input').setValue('drink water')\n    await wrapper.find('button').trigger('click')\n    await wrapper.vm.$nextTick()\n    await wrapper.findAll('button').at(1).trigger('click')\n    await wrapper.vm.$nextTick()\n    expect(wrapper.find('li').text()).not.toContain('drink water')\n  })\n  \n  it('should delete a specific task from the list', async () => {\n    await wrapper.find('input').setValue('rest for a while')\n    await wrapper.find('button').trigger('click')\n    await wrapper.vm.$nextTick()\n    await wrapper.find('input').setValue('drink water')\n    await wrapper.find('button').trigger('click')\n    await wrapper.vm.$nextTick()\n    await wrapper.find('input').setValue('rest for a while')\n    await wrapper.find('button').trigger('click')\n    await wrapper.vm.$nextTick()\n    await wrapper.find('input').setValue('drink milk')\n    await wrapper.find('button').trigger('click')\n    await wrapper.vm.$nextTick()\n    await wrapper.findAll('button').at(1).trigger('click')\n    await wrapper.vm.$nextTick()\n    expect(wrapper.findAll('li').at(0).text()).not.toContain('drink water')\n  })\n})","usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/src/App.vue","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/src/main.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/src/router/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/src/views/HomeView.vue","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/vite.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/mert/Desktop/Devops-pipeline-project/vitest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]